{
	"scope": "source.rbxlua - string",
	"completions": [
		"workspace",
		"script",
		"plugin",
		"_VERSION",
		"_G",
		"self",
		"else",
		"elseif",
		"true",
		"false",
		"Roact",
		"rbx",
		{ "trigger": "table.insert", "contents": "table.insert(${1:tbl}, ${2:val})" },
		{ "trigger": "table.remove", "contents": "table.remove(${1:tbl}, ${2:val})" },
		{ "trigger": "table.sort", "contents": "table.sort(${1:tbl}, ${2:cmp})" },
		{ "trigger": "table.concat", "contents": "table.concat(${1:tbl}, ${2:sep})" },
		{ "trigger": "string.find", "contents": "string.find(${1:str}, ${2:pattern}, ${3:index})" },
		{ "trigger": "string.format", "contents": "string.format(${1:str}, ${2:...})" },
		{ "trigger": "string.sub\tsubstring", "contents": "string.sub(${1:str}, ${2:i}, ${3:j})" },
		{ "trigger": "string.gmatch", "contents": "string.gmatch(${1:str}, ${2:pattern})" },
		{ "trigger": "string.match", "contents": "string.match(${1:str}, ${2:pattern})" },
		{ "trigger": "string.gsub", "contents": "string.gsub(${1:str}, ${2:pattern}, ${3:replace})" },
		{ "trigger": "string.len", "contents": "string.len(${1:str})" },
		{ "trigger": "string.reverse", "contents": "string.reverse(${1:str})" },
		{ "trigger": "string.lower", "contents": "string.lower(${1:str})" },
		{ "trigger": "string.upper", "contents": "string.upper(${1:str})" },
		{ "trigger": "string.rep\treplicate", "contents": "string.rep(${1:str}, ${2:count})" },
		{ "trigger": "math.abs", "contents": "math.abs($1)" },
		{ "trigger": "math.ceil", "contents": "math.ceil($1)" },
		{ "trigger": "math.cos", "contents": "math.cos($1)" },
		{ "trigger": "math.deg", "contents": "math.deg($1)" },
		{ "trigger": "math.exp", "contents": "math.exp($1)" },
		{ "trigger": "math.floor", "contents": "math.floor($1)" },
		{ "trigger": "math.modf", "contents": "math.modf($1)" },
		{ "trigger": "math.huge", "contents": "math.huge($1)" },
		{ "trigger": "math.log", "contents": "math.log($1)" },
		{ "trigger": "math.max", "contents": "math.max($1)" },
		{ "trigger": "math.min", "contents": "math.min($1)" },
		{ "trigger": "math.pi", "contents": "math.pi($1)" },
		{ "trigger": "math.rad", "contents": "math.rad($1)" },
		{ "trigger": "math.random", "contents": "math.random($1)" },
		{ "trigger": "math.randomseed", "contents": "math.randomseed($1)" },
		{ "trigger": "math.sin", "contents": "math.sin($1)" },
		{ "trigger": "math.sqrt", "contents": "math.sqrt($1)" },
		{ "trigger": "math.tan", "contents": "math.tan($1)" },
		{ "trigger": "math.tointeger", "contents": "math.tointeger($1)" },
		{ "trigger": "math.acos", "contents": "math.acos($1)" },
		{ "trigger": "math.asin", "contents": "math.asin($1)" },
		{ "trigger": "math.atan", "contents": "math.atan($1)" },
		{ "trigger": "if\tif then end", "contents": "if $1 then\n\t$2\nend" },
		{ "trigger": "if\tif then else end", "contents": "if $1 then\n\t$2\nelse\n\t$3\nend" },
		{ "trigger": "if\tif then elseif then else end", "contents": "if $1 then\n\t$2\nelseif $3 then\n\t$4\nelse\n\t$5\nend" },
		{ "trigger": "function\tfunction cls:func() end", "contents": "function $1:$2($3)\n\t$4\nend" },
		{ "trigger": "function\tfunction() end", "contents": "function($1)\n\t$2\nend" },
		{ "trigger": "for\tfor i = 1, 10", "contents": "for ${1:i} = ${2:1}, ${3:10}${4:, 1} do\n\t$5\nend" },
		{ "trigger": "for\tfor i, v in ipairs()", "contents": "for ${1:i}, ${2:v} in ipairs($3) do\n\t$4\nend" },
		{ "trigger": "for\tfor k, v in pairs()", "contents": "for ${1:k}, ${2:v} in pairs($3) do\n\t$4\nend" },
		{ "trigger": "repeat\trepeat until", "contents": "repeat\n\t$1\nuntil $2" },
		{ "trigger": "while\twhile do", "contents": "while $1 do\n\t$2\nend" },
		{ "trigger": "return", "contents": "return $1" },
		{ "trigger": "delay", "contents": "delay($1, $2)" },
		{ "trigger": "wait", "contents": "wait($1)" },
		{ "trigger": "assert", "contents": "assert($1, $2)" },
		{ "trigger": "getfenv", "contents": "getfenv($1)" },
		{ "trigger": "getmetatable", "contents": "getmetatable($1)" },
		{ "trigger": "loadstring", "contents": "loadstring($1)" },
		{ "trigger": "newproxy", "contents": "newproxy($1)" },
		{ "trigger": "next", "contents": "next($1, $2)" },
		{ "trigger": "os.time", "contents": "os.time($1)" },
		{ "trigger": "os.difftime", "contents": "os.difftime($1, $2)" },
		{ "trigger": "debug.traceback", "contents": "debug.traceback()" },
		{ "trigger": "traceback", "contents": "debug.traceback()" },
		{ "trigger": "pcall", "contents": "pcall($1)" },
		{ "trigger": "print", "contents": "print($1)" },
		{ "trigger": "rawequal", "contents": "rawequal($1, $2)" },
		{ "trigger": "rawget", "contents": "rawget($1, $2)" },
		{ "trigger": "rawset", "contents": "rawset($1, $2, $3)" },
		{ "trigger": "select", "contents": "select($1, ${2:...})" },
		{ "trigger": "setfenv", "contents": "setfenv($1, $2" },
		{ "trigger": "setmetatable", "contents": "setmetatable($1, $2)" },
		{ "trigger": "tonumber", "contents": "tonumber($1${2, 10})" },
		{ "trigger": "tostring", "contents": "tostring($1)" },
		{ "trigger": "type", "contents": "type($1)" },
		{ "trigger": "unpack", "contents": "unpack($1)" },
		{ "trigger": "xpcall", "contents": "xpcall($1, $2)" },
		{ "trigger": "ElapsedTime", "contents": "ElapsedTime()" },
		{ "trigger": "LoadLibrary", "contents": "LoadLibrary($1)" },
		{ "trigger": "require", "contents": "require($1)" },
		{ "trigger": "tick", "contents": "tick()" },
		{ "trigger": "time", "contents": "time()" },
		{ "trigger": "UserSettings", "contents": "UserSettings()" },
		{ "trigger": "Version", "contents": "Version()" },
		{ "trigger": "warn", "contents": "warn($1)" },
		{ "trigger": "ypcall", "contents": "ypcall($1)" },
		{ "trigger": "settings", "contents": "settings()" },
		{ "trigger": "local", "contents": "local $1 = $2" },
		{ "trigger": "Enum\tEnum.Name.Item", "contents": "Enum.$1.$2" },
		{ "trigger": "spawn", "contents": "spawn($1)" },
		{ "trigger": "game\tgame:GetService", "contents": "game:GetService(\"$1\")" },
		{ "trigger": "GetService\tgame:GetService", "contents": "game:GetService(\"$1\")" },
		{ "trigger": "new\tInstance.new", "contents": "Instance.new(\"$1\")" },
		{ "trigger": "UDim\tUDim.new", "contents": "UDim.new($1, $2)" },
		{ "trigger": "UDim2\tUDim2.new", "contents": "UDim2.new($1, $2, $3, $4)" },
		{ "trigger": "Vector2\tVector2.new", "contents": "Vector2.new($1, $2)" },
		{ "trigger": "Vector3\tVector3.new", "contents": "Vector3.new($1, $2, $3)" },
		{ "trigger": "Rect\tRect.new", "contents": "Rect.new($1, $2, $3, $4)" },
		{ "trigger": "Roact.Component\textend(type)", "contents": "Roact.Component:extend(\"${1:type}\")" },
		{ "trigger": "Roact.PureComponent\textend(type)", "contents": "Roact.PureComponent:extend(\"${1:type}\")" },
		{ "trigger": "Roact.createElement\t(type, {props})", "contents": "Roact.createElement(\"${1:type}\", {\n\t$2\n})" },
		{ "trigger": "Roact.createElement\t(type, {props}, {kids})", "contents": "Roact.createElement(\"${1:type}\", {\n\t$2\n}, {\n\t$3\n})" },
		{ "trigger": "Roact.reify", "contents": "Roact.reify($1)" },
		{ "trigger": "Roact.teardown", "contents": "Roact.teardown($1)" },
		{ "trigger": "Roact.Ref\t[Roact.Ref]", "contents": "[Roact.Ref]${1: = function(rbx)\n\t\nend}" },
		{ "trigger": "Roact.Portal", "contents": "Roact.Portal" },
		{ "trigger": "Roact.Children", "contents": "Roact.Children" },
		{ "trigger": "RoactRodux.connect", "contents": "RoactRodux.connect(function(store, props)\n\tlocal state = store:GetState()\n\treturn {\n\t\t$1\n\t}\nend)" }
	]
}

